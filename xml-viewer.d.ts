/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   xml-viewer.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {PolymerElement} from '@polymer/polymer/polymer-element.js';

import {html} from '@polymer/polymer/lib/utils/html-tag.js';

export {XmlViewer};

declare namespace UiElements {

  /**
   * `<xml-viewer>` An XML payload viewer for the XML response
   *
   * ### Example
   * ```
   * <xml-viewer xml="&lt;tag&gt;&lt;/tag&gt;"></xml-viewer>
   * ```
   *
   * **Note** This element uses web workers with dependencies. It expect to find
   * workers files in current directory in the `workers` folder.
   * Your build process has to ensure that this files are avaiable.
   *
   * ## Content actions
   *
   * You can add action items in the actions bar by adding elements as a children
   * of this element with slot set to `content-action`.
   *
   * ### Example
   * ```
   * <xml-viewer>
   *  <paper-icon-button title="Additional action" icon="arc:cached" slot="content-action"></paper-icon-button>
   *  <paper-icon-button title="Clear the code" icon="arc:clear" slot="content-action"></paper-icon-button>
   * </xml-viewer>
   * ```
   *
   * ## Changes in version 2
   *
   * - The element doesn't mixin text search behavior. This service is deprecated.
   * - It uses worker files instead of compiled worker data in elements body
   *
   * ### Styling
   *
   * `<xml-viewer>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--xml-viewer` | Mixin applied to the element | `{}`
   * `--xml-viewer-comment-color` | Color of the comment section. | `#236E25`
   * `--xml-viewer-punctuation-color` | Color of the punctuation signs | `black`
   * `--xml-viewer-tag-name-color` | Color of the XML tag name | `#881280`
   * `--xml-viewer-attribute-name-color` | Color of the XML attribute. | `#994500`
   * `--xml-viewer-attribute-value-color` | Color of the attribute's value. | `#1A1AA6`
   * `--xml-viewer-cdata-color` | CDATA section color. | `#48A`
   * `--xml-viewer-document-declaration-color` | XML document declaration (header) color. | `#999`
   * `--xml-viewer-constant-color` | Constant (boolean, null, number) color. | `#283593`
   */
  class XmlViewer extends PolymerElement {

    /**
     * XML data to parse and display
     */
    xml: object|null|undefined;

    /**
     * True if error ocurred when parsing data
     */
    readonly isError: boolean|null|undefined;

    /**
     * True when XML is parsing
     */
    readonly working: boolean|null|undefined;

    /**
     * True when output should be shown.
     */
    readonly showOutput: boolean|null|undefined;

    /**
     * An error message to display.
     */
    readonly errorMessage: string|null|undefined;

    /**
     * When set deprecation message won't be rendered.
     */
    hideDeprecationMessage: boolean|null|undefined;

    /**
     * Used in generating HTML output to prefix CSS classes for CSS scopes.
     */
    cssPrefix: string|null|undefined;

    /**
     * Handler for the xml attribute change.
     *
     * @param xml Changed value.
     */
    _changed(xml: String|null): void;

    /**
     * Resets the state of the component.
     */
    reset(): void;

    /**
     * Parses and renders XML data.
     *
     * @param xml XML string to parse and render.
     */
    render(xml: String|null): void;

    /**
     * Handles parsing errors
     *
     * @param xml Original XML string
     */
    _parsingError(e: Error|null, xml: String|null): void;

    /**
     * Computes value for `showOutput` property
     *
     * @returns `true` if the output can be displayed.
     */
    _computeShowOutput(working: Boolean|null, xml: String|null): Boolean|null;

    /**
     * Handles clicks on the rendered items.
     * Provides support for expand / collapse functions.
     */
    _handleDisplayClick(e: Event|null): void;

    /**
     * Computes CSS class for the content actions pane.
     */
    _computeActionsPanelClass(showOutput: any): any;
    _processData(xml: any): any;
    _getHTML(doc: any): any;
    _parse(node: any): any;
    _parseValue(value: any): any;
    _parseElement(node: any): any;
    _parseAttributes(node: any): any;
    _getAttributesString(attr: any): any;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "xml-viewer": UiElements.XmlViewer;
  }
}
